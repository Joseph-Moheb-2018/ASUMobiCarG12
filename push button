//example 1
int LED = 13;
int pushButton =0;
void setup() {
  // put your setup code here, to run once:
  //first we set the pin 13 to be output.
  pinMode(LED, OUTPUT);
  //Then pin 0 to be input
  pinMode(pushButton, INPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
  // this if statment checks if the butoon is pressed.
  if (digitalRead(pushButton) == HIGH){
    // Here we set it high for 1000 ms then low for other 1000 ms
    digitalWrite(LED, HIGH);
    delay(1000);
    digitalWrite(LED, LOW);
    delay(1000);
  }
}

//example 2 traffic light
int led_yellow =10;
int led_green =11;
int led_red =12;

void setup() {
  
pinMode (led_yellow,OUTPUT );
pinMode (led_green,OUTPUT );
pinMode (led_red,OUTPUT );

}

void loop() {
  digitalWrite (led_yellow ,HIGH );
  digitalWrite (led_green, LOW );
  digitalWrite (led_red, LOW );
delay (3000);

digitalWrite (led_red, LOW );
digitalWrite (led_yellow ,LOW);
digitalWrite (led_green, HIGH);
delay (5000);

digitalWrite (led_yellow ,LOW);
digitalWrite (led_green, LOW );
digitalWrite (led_red, HIGH );
delay (3000);

}
//example 3 knock
// these constants won't change:
const int ledPin = 13;      // LED connected to digital pin 13
const int knockSensor = A0; // the piezo is connected to analog pin 0
const int threshold = 100;  // threshold value to decide when the detected sound is a knock or not


// these variables will change:
int sensorReading = 0;      // variable to store the value read from the sensor pin
int ledState = LOW;         // variable used to store the last LED status, to toggle the light

void setup() {
  pinMode(ledPin, OUTPUT); // declare the ledPin as as OUTPUT
  Serial.begin(9600);       // use the serial port
}

void loop() {
  // read the sensor and store it in the variable sensorReading:
  sensorReading = analogRead(knockSensor);

  // if the sensor reading is greater than the threshold:
  if (sensorReading >= threshold) {
    // toggle the status of the ledPin:
    ledState = !ledState;
    // update the LED pin itself:
    digitalWrite(ledPin, ledState);
    // send the string "Knock!" back to the computer, followed by newline
    Serial.println("Knock!");
  }
  delay(100);
}
//example 4 memsic2125
// these constants won't change:
const int xPin = 2;		// X output of the accelerometer
const int yPin = 3;		// Y output of the accelerometer

void setup() {
  // initialize serial communications:
  Serial.begin(9600);
  // initialize the pins connected to the accelerometer as inputs:
  pinMode(xPin, INPUT);
  pinMode(yPin, INPUT);
}

void loop() {
  // variables to read the pulse widths:
  int pulseX, pulseY;
  // variables to contain the resulting accelerations
  int accelerationX, accelerationY;

  // read pulse from x- and y-axes:
  pulseX = pulseIn(xPin, HIGH);
  pulseY = pulseIn(yPin, HIGH);

  // convert the pulse width into acceleration
  // accelerationX and accelerationY are in milli-g's:
  // Earth's gravity is 1000 milli-g's, or 1 g.
  accelerationX = ((pulseX / 10) - 500) * 8;
  accelerationY = ((pulseY / 10) - 500) * 8;

  // print the acceleration
  Serial.print(accelerationX);
  // print a tab character:
  Serial.print("\t");
  Serial.print(accelerationY);
  Serial.println();

  delay(100);
}
//example 5 4directional tilt sensor
void setup() {
// initialize serial communication:
Serial.begin(9600);
}
void loop()
{
Serial.print("Photo 1: ");
Serial.print(digitalRead(6), DEC); // Display Out 1st value
Serial.print("; ");
Serial.print("Photo 2: ");
Serial.println(digitalRead(7), DEC); // Display Out 2nd value
delay(250);
}

